name: Update Release Drafts

on:
  pull_request:
    types:
      - closed

jobs:
  update_drafts:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Check PR labels
        id: check_labels
        run: |
          labels=$(echo '${{ toJSON(github.event.pull_request.labels.*.name) }}' | jq -r '.[]')
          echo "Labels: $labels"

          if echo "$labels" | grep -q "service: prd-a"; then
            echo "has_prd_a=true" >> $GITHUB_OUTPUT
          fi

          if echo "$labels" | grep -q "service: prd-b"; then
            echo "has_prd_b=true" >> $GITHUB_OUTPUT
          fi

      - name: Update prd-a Draft Release
        if: steps.check_labels.outputs.has_prd_a == 'true'
        run: |
          # 既存のprd-aドラフトを探す
          EXISTING_DRAFT=$(gh release list --draft --json tagName,id | jq -r '.[] | select(.tagName | startswith("prd-a/")) | .id' | head -1)
          
          # PRからリリースノートを生成
          echo "## Prd A の変更点" > release_notes.md
          echo "" >> release_notes.md
          
          # このPRの情報を追加
          echo "### このリリースでの変更" >> release_notes.md
          echo "- #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}" >> release_notes.md
          
          if [ -n "$EXISTING_DRAFT" ]; then
            # 既存ドラフトを更新
            gh release view "$EXISTING_DRAFT" --json body | jq -r '.body' >> existing_notes.md
            cat existing_notes.md >> release_notes.md
            gh release edit "$EXISTING_DRAFT" --notes-file release_notes.md
          else
            # 次のバージョンを決定
            LATEST_VERSION=$(gh release list --exclude-drafts --json tagName | jq -r '.[] | select(.tagName | startswith("prd-a/")) | .tagName' | head -1 | sed 's/prd-a\/v//')
            if [ -z "$LATEST_VERSION" ]; then
              NEXT_VERSION="prd-a/v0.1.0"
            else
              # パッチバージョンを上げる（簡易実装）
              NEXT_VERSION="prd-a/v$(echo $LATEST_VERSION | awk -F. '{print $1"."$2"."$3+1}')"
            fi
            
            # 新しいドラフト作成
            gh release create "$NEXT_VERSION" \
              --title "$NEXT_VERSION" \
              --notes-file release_notes.md \
              --draft
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update prd-b Draft Release
        if: steps.check_labels.outputs.has_prd_b == 'true'
        run: |
          # 既存のprd-bドラフトを探す
          EXISTING_DRAFT=$(gh release list --draft --json tagName,id | jq -r '.[] | select(.tagName | startswith("prd-b/")) | .id' | head -1)
          
          # PRからリリースノートを生成
          echo "## Prd B の変更点" > release_notes.md
          echo "" >> release_notes.md
          
          # このPRの情報を追加
          echo "### このリリースでの変更" >> release_notes.md
          echo "- #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}" >> release_notes.md
          
          if [ -n "$EXISTING_DRAFT" ]; then
            # 既存ドラフトを更新
            gh release view "$EXISTING_DRAFT" --json body | jq -r '.body' >> existing_notes.md
            cat existing_notes.md >> release_notes.md
            gh release edit "$EXISTING_DRAFT" --notes-file release_notes.md
          else
            # 次のバージョンを決定
            LATEST_VERSION=$(gh release list --exclude-drafts --json tagName | jq -r '.[] | select(.tagName | startswith("prd-b/")) | .tagName' | head -1 | sed 's/prd-b\/v//')
            if [ -z "$LATEST_VERSION" ]; then
              NEXT_VERSION="prd-b/v0.1.0"
            else
              # パッチバージョンを上げる（簡易実装）
              NEXT_VERSION="prd-b/v$(echo $LATEST_VERSION | awk -F. '{print $1"."$2"."$3+1}')"
            fi
            
            # 新しいドラフト作成
            gh release create "$NEXT_VERSION" \
              --title "$NEXT_VERSION" \
              --notes-file release_notes.md \
              --draft
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
